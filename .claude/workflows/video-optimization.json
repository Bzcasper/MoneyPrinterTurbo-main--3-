{
  "name": "MoneyPrinterTurbo Video Optimization Workflow",
  "version": "2.0.0",
  "description": "Comprehensive video processing workflow with GPU acceleration, parallel processing, and error recovery",
  "type": "multi-agent-video-pipeline",
  
  "metadata": {
    "author": "Integration Specialist Agent",
    "created": "2025-01-27",
    "project": "MoneyPrinterTurbo",
    "tags": ["video", "optimization", "gpu", "parallel", "ffmpeg", "chinese"],
    "compatibility": {
      "platforms": ["linux", "windows", "macos"],
      "python_version": ">=3.8",
      "dependencies": ["moviepy", "ffmpeg", "torch", "opencv"]
    }
  },
  
  "configuration": {
    "concurrency": {
      "max_agents": 12,
      "parallel_clips": 8,
      "thread_pool_size": 16,
      "process_pool_size": 4,
      "gpu_workers": 2
    },
    "memory_management": {
      "max_memory_mb": 4096,
      "gc_threshold": 3072,
      "clip_cache_size": 100,
      "force_cleanup_interval": 30
    },
    "performance": {
      "target_speedup": "3-5x",
      "quality_preset": "balanced",
      "hardware_acceleration": true,
      "codec_optimization": true,
      "batch_processing": true
    }
  },
  
  "agents": {
    "coordinator": {
      "type": "coordinator",
      "name": "Video Pipeline Coordinator",
      "role": "Orchestrate entire video processing pipeline",
      "responsibilities": [
        "Initialize Claude Flow coordination",
        "Manage agent lifecycle",
        "Monitor progress and performance",
        "Handle error recovery",
        "Collect and report metrics"
      ],
      "coordination_hooks": {
        "pre_task": "npx claude-flow@alpha hooks pre-task --description 'Video pipeline coordination'",
        "post_edit": "npx claude-flow@alpha hooks post-edit --memory-key 'coordinator/progress'",
        "notification": "npx claude-flow@alpha hooks notification --level info",
        "post_task": "npx claude-flow@alpha hooks post-task --analyze-performance true"
      }
    },
    
    "video_processor": {
      "type": "coder",
      "name": "Parallel Video Processor",
      "role": "Handle parallel video clip processing with GPU acceleration",
      "responsibilities": [
        "Process video clips in parallel threads",
        "Apply transitions and effects",
        "Optimize for target resolutions",
        "Handle codec selection",
        "Memory management during processing"
      ],
      "tools": ["moviepy", "opencv", "ffmpeg", "gpu_acceleration"],
      "coordination_hooks": {
        "pre_task": "npx claude-flow@alpha hooks pre-task --description 'Parallel video processing'",
        "post_edit": "npx claude-flow@alpha hooks post-edit --memory-key 'processor/clips'",
        "notification": "npx claude-flow@alpha hooks notification --level success"
      }
    },
    
    "ffmpeg_specialist": {
      "type": "optimizer",
      "name": "FFmpeg Optimization Specialist",
      "role": "Handle progressive concatenation and codec optimization",
      "responsibilities": [
        "Progressive video concatenation",
        "Hardware codec detection",
        "Quality vs speed optimization",
        "Format conversion",
        "Audio synchronization"
      ],
      "tools": ["ffmpeg", "hardware_encoders", "codec_detection"],
      "coordination_hooks": {
        "pre_task": "npx claude-flow@alpha hooks pre-task --description 'FFmpeg optimization'",
        "post_edit": "npx claude-flow@alpha hooks post-edit --memory-key 'ffmpeg/encoding'",
        "notification": "npx claude-flow@alpha hooks notification --level performance"
      }
    },
    
    "chinese_specialist": {
      "type": "specialist",
      "name": "Chinese Content Specialist", 
      "role": "Handle Chinese text, subtitles, and voice synthesis",
      "responsibilities": [
        "Chinese text processing",
        "Subtitle generation and positioning",
        "Font selection and optimization",
        "GPT-SoVITS voice integration",
        "Vertical video optimization"
      ],
      "tools": ["gpt_sovits", "chinese_fonts", "subtitle_generation"],
      "coordination_hooks": {
        "pre_task": "npx claude-flow@alpha hooks pre-task --description 'Chinese content processing'",
        "post_edit": "npx claude-flow@alpha hooks post-edit --memory-key 'chinese/content'",
        "notification": "npx claude-flow@alpha hooks notification --level success"
      }
    },
    
    "quality_assurance": {
      "type": "tester",
      "name": "Video Quality Assurance",
      "role": "Validate video quality and performance metrics",
      "responsibilities": [
        "Video file validation",
        "Quality assessment",
        "Performance benchmarking",
        "Error detection and reporting",
        "Metrics collection"
      ],
      "tools": ["validation_tools", "benchmarking", "metrics"],
      "coordination_hooks": {
        "pre_task": "npx claude-flow@alpha hooks pre-task --description 'Quality assurance'",
        "post_edit": "npx claude-flow@alpha hooks post-edit --memory-key 'qa/results'",
        "notification": "npx claude-flow@alpha hooks notification --level validation"
      }
    },
    
    "error_recovery": {
      "type": "monitor",
      "name": "Error Recovery Specialist",
      "role": "Handle errors and implement recovery strategies",
      "responsibilities": [
        "Error pattern detection",
        "Automatic recovery procedures",
        "Fallback mechanism implementation",
        "Resource cleanup",
        "Failure analysis"
      ],
      "tools": ["error_handling", "recovery_procedures", "cleanup"],
      "coordination_hooks": {
        "pre_task": "npx claude-flow@alpha hooks pre-task --description 'Error recovery monitoring'",
        "post_edit": "npx claude-flow@alpha hooks post-edit --memory-key 'recovery/actions'",
        "notification": "npx claude-flow@alpha hooks notification --level error"
      }
    }
  },
  
  "workflows": {
    "video_processing_pipeline": {
      "description": "Complete video processing with optimization",
      "stages": [
        {
          "name": "initialization",
          "agent": "coordinator",
          "tasks": [
            "Initialize Claude Flow swarm",
            "Set up coordination memory",
            "Validate input parameters",
            "Detect system capabilities"
          ],
          "timeout": 30,
          "retry_count": 2
        },
        {
          "name": "video_loading",
          "agent": "video_processor", 
          "tasks": [
            "Load and validate video files",
            "Extract video metadata",
            "Check resolution and format",
            "Prepare processing queue"
          ],
          "parallel": true,
          "timeout": 120,
          "retry_count": 3
        },
        {
          "name": "parallel_processing",
          "agent": "video_processor",
          "tasks": [
            "Process clips in parallel threads",
            "Apply transitions and effects",
            "Resize for target format",
            "Optimize with GPU acceleration"
          ],
          "parallel": true,
          "batch_size": 8,
          "timeout": 300,
          "retry_count": 3
        },
        {
          "name": "concatenation",
          "agent": "ffmpeg_specialist",
          "tasks": [
            "Progressive FFmpeg concatenation",
            "Hardware codec optimization",
            "Memory-efficient processing",
            "Quality preservation"
          ],
          "timeout": 600,
          "retry_count": 2
        },
        {
          "name": "chinese_integration",
          "agent": "chinese_specialist",
          "tasks": [
            "Generate Chinese subtitles",
            "Integrate GPT-SoVITS voice",
            "Optimize for vertical format",
            "Apply Chinese fonts"
          ],
          "parallel": false,
          "timeout": 180,
          "retry_count": 2
        },
        {
          "name": "final_encoding",
          "agent": "ffmpeg_specialist",
          "tasks": [
            "Final video encoding",
            "Audio-video synchronization",
            "Quality optimization",
            "Format standardization"
          ],
          "timeout": 300,
          "retry_count": 2
        },
        {
          "name": "quality_validation",
          "agent": "quality_assurance",
          "tasks": [
            "Validate output quality",
            "Performance metrics collection",
            "Error detection",
            "Success verification"
          ],
          "timeout": 60,
          "retry_count": 1
        },
        {
          "name": "cleanup",
          "agent": "coordinator",
          "tasks": [
            "Clean temporary files",
            "Store metrics in memory",
            "Generate performance report",
            "Close coordination session"
          ],
          "timeout": 30,
          "retry_count": 1
        }
      ]
    },
    
    "error_recovery_workflow": {
      "description": "Automated error recovery and fallback procedures",
      "triggers": [
        "processing_failure",
        "memory_overflow", 
        "codec_error",
        "timeout_exceeded"
      ],
      "stages": [
        {
          "name": "error_diagnosis",
          "agent": "error_recovery",
          "tasks": [
            "Analyze error type and context",
            "Identify recovery strategy",
            "Check system resources",
            "Log error details"
          ]
        },
        {
          "name": "resource_cleanup",
          "agent": "error_recovery", 
          "tasks": [
            "Force garbage collection",
            "Close open video clips",
            "Clear temporary files",
            "Reset resource pools"
          ]
        },
        {
          "name": "fallback_execution",
          "agent": "error_recovery",
          "tasks": [
            "Switch to fallback codec",
            "Reduce parallel processing",
            "Lower quality settings",
            "Sequential processing mode"
          ]
        },
        {
          "name": "recovery_validation",
          "agent": "quality_assurance",
          "tasks": [
            "Validate recovery success",
            "Check output quality",
            "Update success metrics",
            "Continue or abort pipeline"
          ]
        }
      ]
    }
  },
  
  "performance_optimization": {
    "codec_selection": {
      "priority_order": ["qsv", "nvenc", "vaapi", "software"],
      "quality_presets": {
        "speed": {
          "software": {"preset": "ultrafast", "crf": "25"},
          "qsv": {"preset": "veryfast", "global_quality": "25"},
          "nvenc": {"preset": "p1", "cq": "25"}
        },
        "balanced": {
          "software": {"preset": "fast", "crf": "23"},
          "qsv": {"preset": "balanced", "global_quality": "23"},
          "nvenc": {"preset": "p4", "cq": "23"}
        },
        "quality": {
          "software": {"preset": "medium", "crf": "20"},
          "qsv": {"preset": "slow", "global_quality": "20"},
          "nvenc": {"preset": "p6", "cq": "20"}
        }
      }
    },
    
    "parallel_processing": {
      "thread_strategy": "cpu_cores * 2",
      "batch_processing": true,
      "memory_monitoring": true,
      "resource_pooling": true,
      "fault_tolerance": true
    },
    
    "memory_optimization": {
      "clip_caching": false,
      "progressive_loading": true,
      "garbage_collection": "aggressive",
      "resource_limits": {
        "max_memory_mb": 4096,
        "max_concurrent_clips": 8,
        "cleanup_threshold": 3072
      }
    }
  },
  
  "error_handling": {
    "patterns": {
      "memory_overflow": {
        "detection": "memory_usage > threshold",
        "recovery": ["force_gc", "reduce_batch_size", "sequential_mode"],
        "fallback": "lower_quality_preset"
      },
      "codec_failure": {
        "detection": "encoding_error",
        "recovery": ["try_next_codec", "software_fallback"],
        "fallback": "basic_encoding"
      },
      "file_corruption": {
        "detection": "validation_failure",
        "recovery": ["skip_corrupted", "alternative_source"],
        "fallback": "placeholder_clip"
      },
      "timeout": {
        "detection": "processing_time > limit",
        "recovery": ["extend_timeout", "restart_processing"],
        "fallback": "abort_with_partial_result"
      }
    },
    
    "recovery_strategies": {
      "automatic": ["retry_with_backoff", "switch_codec", "reduce_complexity"],
      "manual": ["user_intervention", "parameter_adjustment"],
      "fallback": ["basic_processing", "emergency_mode"]
    }
  },
  
  "metrics_and_monitoring": {
    "performance_metrics": [
      "processing_time",
      "speedup_factor", 
      "memory_usage_peak",
      "codec_efficiency",
      "error_rate",
      "quality_score"
    ],
    
    "quality_metrics": [
      "video_resolution",
      "frame_rate_consistency",
      "audio_sync_accuracy",
      "subtitle_readability",
      "overall_quality_score"
    ],
    
    "system_metrics": [
      "cpu_utilization",
      "gpu_utilization",
      "memory_consumption",
      "disk_io",
      "network_usage"
    ],
    
    "reporting": {
      "real_time_monitoring": true,
      "performance_dashboard": true,
      "error_logging": true,
      "success_analytics": true,
      "coordination_memory_storage": true
    }
  },
  
  "chinese_content_optimization": {
    "gpt_sovits_integration": {
      "voice_models": [
        "professional",
        "warm_female", 
        "energetic"
      ],
      "quality_settings": {
        "sample_rate": 24000,
        "batch_processing": true,
        "emotion_control": true
      }
    },
    
    "subtitle_optimization": {
      "fonts": [
        "MicrosoftYaHeiBold.ttc",
        "MicrosoftYaHeiNormal.ttc",
        "STHeitiMedium.ttc"
      ],
      "positioning": {
        "vertical_video": "lower_third",
        "horizontal_video": "bottom_center"
      },
      "styling": {
        "font_size": 48,
        "stroke_width": 2,
        "color": "white",
        "stroke_color": "black"
      }
    },
    
    "vertical_video_optimization": {
      "target_formats": ["youtube_shorts", "instagram_reels", "tiktok"],
      "aspect_ratios": ["9:16", "1:1"],
      "background_strategies": ["blur", "stretch", "crop"]
    }
  },
  
  "deployment": {
    "environment_setup": {
      "python_requirements": [
        "moviepy>=1.0.3",
        "opencv-python>=4.5.0",
        "torch>=1.9.0",
        "loguru>=0.6.0",
        "psutil>=5.8.0"
      ],
      "system_requirements": [
        "ffmpeg>=4.3",
        "ImageMagick>=7.0",
        "CUDA>=11.0 (optional)"
      ]
    },
    
    "configuration_validation": {
      "required_settings": [
        "video.default_format",
        "gpt_sovits.api_base_url",
        "app.video_source"
      ],
      "optional_settings": [
        "video.enable_gpu_acceleration",
        "whisper.device"
      ]
    },
    
    "startup_checks": [
      "ffmpeg_availability",
      "gpu_detection",
      "font_availability",
      "api_connectivity",
      "memory_sufficiency"
    ]
  }
}