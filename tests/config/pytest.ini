[tool:pytest]
# Pytest configuration for comprehensive microservices testing

# Test discovery
python_files = test_*.py *_test.py
python_functions = test_*
python_classes = Test*

# Test directories
testpaths = tests

# Minimum Python version
minversion = 3.8

# Add current directory to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --color=yes
    --durations=10
    --cov=app
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=70
    --maxfail=5
    --capture=no

# Markers for test categorization
markers =
    unit: Unit tests for individual components
    integration: Integration tests for service interactions
    e2e: End-to-end tests for complete workflows
    performance: Performance and load testing
    chaos: Chaos engineering and fault tolerance tests
    slow: Slow running tests (will be skipped by default)
    external: Tests requiring external services
    smoke: Basic smoke tests for system health
    regression: Regression tests for bug fixes
    security: Security-focused tests
    database: Tests requiring database
    redis: Tests requiring Redis
    api: API endpoint tests
    tdd: Test-driven development tests
    
# Test timeout (in seconds)
timeout = 300

# Async test configuration
asyncio_mode = auto

# Logging configuration
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*unclosed.*:ResourceWarning
    
# Coverage configuration
[coverage:run]
source = app
omit = 
    */tests/*
    */test_*.py
    */__pycache__/*
    */venv/*
    */env/*
    */migrations/*
    */alembic/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml