"""
Complete usage example demonstrating the workflow execution engine.
"""

import asyncio
import logging
from datetime import datetime
from typing import Dict, Any

from ..core.engine import WorkflowEngine, ExecutionMode
from ..core.workflow import Workflow, WorkflowStep
from ..utils.workflow_loader import WorkflowLoader
from ..utils.workflow_validator import WorkflowValidator


# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


def create_example_workflow() -> Workflow:
    """Create a comprehensive example workflow."""
    steps = [
        WorkflowStep(
            id="initialize",
            name="Initialize Environment",
            action="variable.set",
            parameters={
                "name": "start_time",
                "value": datetime.now().isoformat()
            }
        ),
        WorkflowStep(
            id="create_workspace",
            name="Create Working Directory",
            action="shell.execute",
            parameters={
                "command": "mkdir -p /tmp/workflow_example"
            },
            dependencies=["initialize"],
            rollback_action="shell.execute",
            rollback_parameters={
                "command": "rm -rf /tmp/workflow_example"
            }
        ),
        WorkflowStep(
            id="write_config",
            name="Write Configuration File",
            action="file.write",
            parameters={
                "path": "/tmp/workflow_example/config.json",
                "content": '{"environment": "example", "version": "1.0"}'
            },
            dependencies=["create_workspace"],
            parallel_group="file_operations"
        ),
        WorkflowStep(
            id="write_readme",
            name="Write README File",
            action="file.write",
            parameters={
                "path": "/tmp/workflow_example/README.md",
                "content": "# Example Workflow\\n\\nThis is generated by the workflow engine."
            },
            dependencies=["create_workspace"],
            parallel_group="file_operations"
        ),
        WorkflowStep(
            id="validate_files",
            name="Validate Created Files",
            action="shell.execute",
            parameters={
                "command": "ls -la /tmp/workflow_example/"
            },
            dependencies=["write_config", "write_readme"],
            timeout=30
        ),
        WorkflowStep(
            id="cleanup_optional",
            name="Cleanup (Optional)",
            action="shell.execute",
            parameters={
                "command": "echo 'Cleanup would happen here'"
            },
            dependencies=["validate_files"],
            critical=False
        )
    ]
    
    workflow = Workflow(
        id="example_workflow_001",
        name="Complete Example Workflow",
        description="Demonstrates various workflow engine capabilities",
        steps=steps,
        metadata={
            "author": "Workflow Engine Example",
            "category": "demonstration",
            "tags": ["example", "comprehensive", "demo"]
        }
    )
    
    return workflow


async def demonstrate_basic_execution():
    """Demonstrate basic workflow execution."""
    print("\\n" + "="*60)
    print("BASIC WORKFLOW EXECUTION DEMONSTRATION")
    print("="*60)
    
    # Create workflow engine
    engine = WorkflowEngine(
        max_concurrent_steps=5,
        default_strategy="adaptive",
        enable_rollback=True,
        enable_claude_flow=True
    )
    
    # Create example workflow
    workflow = create_example_workflow()
    
    print(f"\\nCreated workflow: {workflow.name}")
    print(f"Steps: {len(workflow.steps)}")
    print(f"Description: {workflow.description}")
    
    # Execute workflow
    try:
        print("\\nExecuting workflow...")
        stats = await engine.execute_workflow(
            workflow=workflow,
            execution_mode=ExecutionMode.NORMAL,
            strategy="adaptive",
            variables={"user": "example_user"}
        )
        
        print(f"\\nExecution completed!")
        print(f"Total steps: {stats.total_steps}")
        print(f"Completed: {stats.completed_steps}")
        print(f"Failed: {stats.failed_steps}")
        print(f"Execution time: {stats.total_execution_time:.2f}s")
        
    except Exception as e:
        print(f"\\nExecution failed: {e}")
    
    finally:
        engine.cleanup()


async def demonstrate_dry_run():
    """Demonstrate dry-run execution mode."""
    print("\\n" + "="*60)
    print("DRY-RUN MODE DEMONSTRATION")
    print("="*60)
    
    engine = WorkflowEngine()
    workflow = create_example_workflow()
    
    print(f"\\nRunning workflow '{workflow.name}' in dry-run mode...")
    
    try:
        stats = await engine.execute_workflow(
            workflow=workflow,
            execution_mode=ExecutionMode.DRY_RUN,
            strategy="sequential"
        )
        
        print(f"\\nDry-run completed!")
        print(f"Would execute {stats.total_steps} steps")
        print(f"Simulated completion time: {stats.total_execution_time:.2f}s")
        
    except Exception as e:
        print(f"\\nDry-run failed: {e}")
    
    finally:
        engine.cleanup()


def demonstrate_validation():
    """Demonstrate workflow validation."""
    print("\\n" + "="*60)
    print("WORKFLOW VALIDATION DEMONSTRATION")
    print("="*60)
    
    # Create validator
    validator = WorkflowValidator(
        available_actions=[
            "file.read", "file.write", "file.delete", "file.copy",
            "shell.execute", "http.get", "http.post",
            "variable.set", "variable.get", "wait",
            "validate.condition"
        ]
    )
    
    # Create example workflow
    workflow = create_example_workflow()
    
    print(f"\\nValidating workflow: {workflow.name}")
    
    # Perform validation
    result = validator.validate(workflow, strict=False)
    
    print(f"\\nValidation Results:")
    print(f"Valid: {result.is_valid}")
    print(f"Errors: {len(result.errors)}")
    print(f"Warnings: {len(result.warnings)}")
    print(f"Info: {len(result.info)}")
    
    if result.errors:
        print("\\nErrors:")
        for error in result.errors:
            print(f"  - {error}")
    
    if result.warnings:
        print("\\nWarnings:")
        for warning in result.warnings:
            print(f"  - {warning}")
    
    if result.info:
        print("\\nInfo:")
        for info in result.info:
            print(f"  - {info}")
    
    # Get improvement suggestions
    suggestions = validator.suggest_improvements(workflow)
    if suggestions:
        print("\\nImprovement Suggestions:")
        for suggestion in suggestions:
            print(f"  - {suggestion}")


def demonstrate_workflow_loading():
    """Demonstrate workflow loading from templates."""
    print("\\n" + "="*60)
    print("WORKFLOW LOADING DEMONSTRATION")
    print("="*60)
    
    loader = WorkflowLoader()
    
    print("\\nAvailable built-in templates:")
    templates = loader.list_built_in_templates()
    for template in templates:
        print(f"  - {template}")
    
    # Load from template
    print("\\nLoading 'simple_file_workflow' template...")
    
    try:
        workflow = loader.load_from_template(
            template_name="simple_file_workflow",
            variables={
                "source_file": "/tmp/source.txt",
                "dest_file": "/tmp/destination.txt",
                "suffix": "demo"
            }
        )
        
        print(f"\\nLoaded workflow: {workflow.name}")
        print(f"ID: {workflow.id}")
        print(f"Steps: {len(workflow.steps)}")
        
        # Show step details
        print("\\nSteps:")
        for step in workflow.steps:
            print(f"  {step.id}: {step.name} ({step.action})")
            if step.dependencies:
                print(f"    Dependencies: {step.dependencies}")
        
    except Exception as e:
        print(f"\\nFailed to load template: {e}")


async def demonstrate_parallel_execution():
    """Demonstrate parallel execution strategies."""
    print("\\n" + "="*60)
    print("PARALLEL EXECUTION DEMONSTRATION")
    print("="*60)
    
    # Create workflow with parallel opportunities
    parallel_steps = [
        WorkflowStep(
            id="setup",
            name="Setup Phase",
            action="variable.set",
            parameters={"name": "phase", "value": "setup"}
        ),
        WorkflowStep(
            id="task_a",
            name="Independent Task A",
            action="wait",
            parameters={"seconds": 1},
            dependencies=["setup"],
            parallel_group="parallel_tasks"
        ),
        WorkflowStep(
            id="task_b",
            name="Independent Task B",
            action="wait",
            parameters={"seconds": 1},
            dependencies=["setup"],
            parallel_group="parallel_tasks"
        ),
        WorkflowStep(
            id="task_c",
            name="Independent Task C",
            action="wait",
            parameters={"seconds": 1},
            dependencies=["setup"],
            parallel_group="parallel_tasks"
        ),
        WorkflowStep(
            id="finalize",
            name="Finalization",
            action="variable.set",
            parameters={"name": "completed", "value": True},
            dependencies=["task_a", "task_b", "task_c"]
        )
    ]
    
    parallel_workflow = Workflow(
        id="parallel_demo",
        name="Parallel Execution Demo",
        description="Demonstrates parallel execution capabilities",
        steps=parallel_steps
    )
    
    # Test different strategies
    strategies = ["sequential", "parallel", "adaptive"]
    
    for strategy in strategies:
        print(f"\\nTesting {strategy} strategy...")
        
        engine = WorkflowEngine(default_strategy=strategy)
        
        try:
            start_time = asyncio.get_event_loop().time()
            stats = await engine.execute_workflow(
                workflow=parallel_workflow,
                strategy=strategy
            )
            end_time = asyncio.get_event_loop().time()
            
            print(f"  Execution time: {end_time - start_time:.2f}s")
            print(f"  Completed steps: {stats.completed_steps}/{stats.total_steps}")
            
        except Exception as e:
            print(f"  Failed: {e}")
        
        finally:
            engine.cleanup()


async def main():
    """Run all demonstrations."""
    print("WORKFLOW ENGINE COMPREHENSIVE DEMONSTRATION")
    print("=" * 80)
    
    # Run demonstrations
    await demonstrate_basic_execution()
    await demonstrate_dry_run()
    demonstrate_validation()
    demonstrate_workflow_loading()
    await demonstrate_parallel_execution()
    
    print("\\n" + "="*80)
    print("DEMONSTRATION COMPLETED")
    print("="*80)


if __name__ == "__main__":
    asyncio.run(main())