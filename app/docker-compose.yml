x-common-volumes: &common-volumes
  - ./:/MoneyPrinterTurbo:rw
  - ./storage:/MoneyPrinterTurbo/storage:rw

services:
  webui:
    build:
      context: ..
      dockerfile: app/Dockerfile
    image: moneyprinterturbo-webui:latest
    container_name: moneyprinterturbo-webui-new
    ports:
      - "8501:8501"
    command: [ "streamlit", "run", "./webui/Main.py", "--browser.serverAddress=0.0.0.0", "--server.enableCORS=True", "--browser.gatherUsageStats=False" ]
    volumes:
      - ../:/MoneyPrinterTurbo:rw
      - ../storage:/MoneyPrinterTurbo/storage:rw
    restart: unless-stopped
    environment:
      - PYTHONPATH=/MoneyPrinterTurbo
      - HOST=0.0.0.0
      - PORT=8501
      - STREAMLIT_SERVER_FILE_WATCHER_TYPE=none
      - DATABASE_URL=postgres://postgres:postgres@db:5432/app
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
  api:
    build:
      context: ..
      dockerfile: app/Dockerfile
    image: moneyprinterturbo-api:latest
    container_name: moneyprinterturbo-api-new
    ports:
      - "8080:8080"
    command: [
      "python3", "-m", "uvicorn", "app.main:app",
      "--host", "0.0.0.0",
      "--port", "8080",
      "--workers", "4",
      "--access-log",
      "--log-level", "info"
    ]
    volumes:
      - ../:/MoneyPrinterTurbo:rw
      - ../storage:/MoneyPrinterTurbo/storage:rw
    restart: unless-stopped
    environment:
      - PYTHONPATH=/MoneyPrinterTurbo
      - HOST=0.0.0.0
      - PORT=8080
      - ENVIRONMENT=production
      - ALLOWED_ORIGINS=http://localhost:8501,http://localhost:3000
      - TRUSTED_HOSTS=localhost,127.0.0.1,0.0.0.0
      - DATABASE_URL=postgres://postgres:postgres@db:5432/app
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
  redis:
    image: redis:alpine
    container_name: moneyprinterturbo-redis-new
    restart: always
    # Expose Redis port internally only to avoid host port conflicts
    expose:
      - "6379"
    command: [
      "redis-server",
      "--maxmemory", "256mb",
      "--maxmemory-policy", "allkeys-lru",
      "--appendonly", "yes",
      "--save", "60", "1000"
    ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  mcp-server:
    build:
      context: ..
      dockerfile: app/Dockerfile
    image: moneyprinterturbo-mcp:latest
    container_name: moneyprinterturbo-mcp-new
    ports:
      - "8081:8081"
    command: [
      "python3", "-c",
      "import asyncio; from app.mcp.server import MCPServer; server = MCPServer('0.0.0.0', 8081); asyncio.run(server.start_server())"
    ]
    volumes:
      - ../:/MoneyPrinterTurbo:rw
      - ../storage:/MoneyPrinterTurbo/storage:rw
    restart: unless-stopped
    environment:
      - PYTHONPATH=/MoneyPrinterTurbo
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8081
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENABLE_REDIS=true
    depends_on:
      - redis
    healthcheck:
      test: ["CMD", "python3", "-c", "import websockets; import asyncio; asyncio.run(websockets.connect('ws://localhost:8081').close())"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  db:
    image: postgres:15-alpine
    container_name: moneyprinterturbo-postgres-new
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=mpt
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
