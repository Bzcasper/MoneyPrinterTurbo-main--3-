[browser]
gatherUsageStats = false
[app]
video_source = "pixabay" # "pexels" or "pixabay"

# Whether to hide the configuration panel
hide_config = false

[mcp]
# MCP Server Configuration
enabled = true
server_host = "0.0.0.0"
server_port = 8081
max_connections = 100
rate_limit_requests = 100
rate_limit_window = 60

# MCP Authentication
# SECURITY: Generate a secure JWT secret in production
# Example: openssl rand -hex 32
jwt_secret = "${JWT_SECRET:-your-secret-key-CHANGE-IN-PRODUCTION}"
jwt_expiration = 3600

# MCP Circuit Breaker
circuit_breaker_threshold = 5
circuit_breaker_timeout = 60

# MCP Service Discovery
heartbeat_interval = 30
health_check_interval = 10
service_timeout = 90

# Pexels API Key
# Register at https://www.pexels.com/api/ to get your API key.
# You can use multiple keys to avoid rate limits.
# For example: pexels_api_keys = ["123adsf4567adf89","abd1321cd13efgfdfhi"]
# Please pay attention to the format: Keys must be enclosed in double quotes, multiple keys separated by commas
pexels_api_keys = ["your_pexels_key_here"]

# Pixabay API Key
# Register at https://pixabay.com/api/docs/ to get your API key.
# You can use multiple keys to avoid rate limits.
# For example: pixabay_api_keys = ["123adsf4567adf89","abd1321cd13efgfdfhi"]
# Please pay attention to the format: Keys must be enclosed in double quotes, multiple keys separated by commas
pixabay_api_keys = ["${PIXABAY_API_KEY:-your_pixabay_key_here}"]

# Supported providers:
#   openai
#   moonshot    (Moonshot AI)
#   azure
#   qwen        (Alibaba Qwen)
#   deepseek
#   gemini
#   ollama
#   g4f
#   oneapi
#   cloudflare
#   ernie       (Baidu ERNIE)
llm_provider = "gemini"

########## Pollinations AI Settings
# Visit https://pollinations.ai/ to learn more
# API Key is optional - leave empty for public access
pollinations_api_key = ""
# Default base URL for Pollinations API
pollinations_base_url = "https://pollinations.ai/api/v1"
# Default model for text generation
pollinations_model_name = "openai-fast"

########## Ollama Settings
# No need to set it unless you want to use your own proxy
ollama_base_url = ""
# Check your available models at https://ollama.com/library
ollama_model_name = ""

########## OpenAI API Key
# Get your API key at https://platform.openai.com/api-keys
openai_api_key = "your_openai_key_here"
# No need to set it unless you want to use your own proxy
openai_base_url = ""
# Check your available models at https://platform.openai.com/account/limits
openai_model_name = "gpt-4o-mini"

########## Moonshot API Key
# Visit https://platform.moonshot.cn/console/api-keys to get your API key.
moonshot_api_key = ""
moonshot_base_url = "https://api.moonshot.cn/v1"
moonshot_model_name = "moonshot-v1-8k"

########## OneAPI API Key
# Visit https://github.com/songquanpeng/one-api to get your API key
oneapi_api_key = ""
oneapi_base_url = ""
oneapi_model_name = ""

########## G4F
# Visit https://github.com/xtekky/gpt4free to get more details
# Supported model list: https://github.com/xtekky/gpt4free/blob/main/g4f/models.py
g4f_model_name = "gpt-3.5-turbo"

########## Azure API Key
# Visit https://learn.microsoft.com/zh-cn/azure/ai-services/openai/ to get more details
# API documentation: https://learn.microsoft.com/zh-cn/azure/ai-services/openai/reference
azure_api_key = ""
azure_base_url = ""
azure_model_name = "gpt-35-turbo"        # replace with your model deployment name
azure_api_version = "2024-02-15-preview"

########## Gemini API Key
gemini_api_key = "${GEMINI_API_KEY:-your_gemini_key_here}"
gemini_model_name = "gemini-2.5-pro"

########## Qwen API Key
# Visit https://dashscope.console.aliyun.com/apiKey to get your API key
# Visit below links to get more details
# https://tongyi.aliyun.com/qianwen/
# https://help.aliyun.com/zh/dashscope/developer-reference/model-introduction
qwen_api_key = ""
qwen_model_name = "qwen-max"


########## DeepSeek API Key
# Visit https://platform.deepseek.com/api_keys to get your API key
deepseek_api_key = ""
deepseek_base_url = "https://api.deepseek.com"
deepseek_model_name = "deepseek-chat"

# Subtitle Provider, "edge" or "whisper"
# If empty, the subtitle will not be generated
subtitle_provider = "edge"

#
# ImageMagick
#
# Once you have installed it, ImageMagick will be automatically detected, except on Windows!
# On Windows, for example "C:\Program Files (x86)\ImageMagick-7.1.1-Q16-HDRI\magick.exe"
# Download from https://imagemagick.org/archive/binaries/ImageMagick-7.1.1-29-Q16-x64-static.exe

imagemagick_path = "/usr/bin/convert"


#
# FFMPEG
#
# Under normal circumstances, ffmpeg is downloaded automatically and detected automatically.
# However, if there is an issue with your environment that prevents automatic downloading, you might encounter the following error:
#   RuntimeError: No ffmpeg exe could be found.
#   Install ffmpeg on your system, or set the IMAGEIO_FFMPEG_EXE environment variable.
# In such cases, you can manually download ffmpeg and set the ffmpeg_path, download link: https://www.gyan.dev/ffmpeg/builds/

ffmpeg_path = "/usr/bin/ffmpeg"
#########################################################################################

# When the video is successfully generated, the API service provides a download endpoint for the video, defaulting to the service's current address and listening port.
# For example, http://127.0.0.1:8080/tasks/6357f542-a4e1-46a1-b4c9-bf3bd0df5285/final-1.mp4
# If you need to provide the service externally using a domain name (usually done with nginx as a proxy), you can set it to your domain name.
# For example, https://xxxx.com/tasks/6357f542-a4e1-46a1-b4c9-bf3bd0df5285/final-1.mp4
# endpoint="https://xxxx.com"
endpoint = ""

# Video material storage location
# material_directory = ""                    # Indicates that video materials will be downloaded to the default folder, the default folder is ./storage/cache_videos under the current project
# material_directory = "/user/harry/videos"  # Indicates that video materials will be downloaded to a specified folder
# material_directory = "task"                # Indicates that video materials will be downloaded to the current task's folder, this method does not allow sharing of already downloaded video materials

material_directory = ""

# Used for state management of the task
enable_redis = true
redis_host = "redis"
redis_port = 6379
redis_db = 0
redis_password = ""

# Maximum concurrent tasks for text-to-video generation
max_concurrent_tasks = 5


[whisper]
# Only effective when subtitle_provider is "whisper"

# Run on GPU with FP16
# model = WhisperModel(model_size, device="cuda", compute_type="float16")

# Run on GPU with INT8
# model = WhisperModel(model_size, device="cuda", compute_type="int8_float16")

# Run on CPU with INT8
# model = WhisperModel(model_size, device="cpu", compute_type="int8")

# recommended model_size: "large-v3"
model_size = "large-v3"
# if you want to use GPU, set device="cuda"
device = "CPU"
compute_type = "int8"


[proxy]
### Use a proxy to access the Pexels API
### Format: "http://<username>:<password>@<proxy>:<port>"
### Example: "http://user:pass@proxy:1234"
### Doc: https://requests.readthedocs.io/en/latest/user/advanced/#proxies

# http = "http://10.10.1.10:3128"
# https = "http://10.10.1.10:1080"

[azure]
# Azure Speech API Key
# Get your API key at https://portal.azure.com/#view/Microsoft_Azure_ProjectOxford/CognitiveServicesHub/~/SpeechServices
speech_key = ""
speech_region = ""

[siliconflow]
# SiliconFlow API Key
# Get your API key at https://siliconflow.cn
api_key = ""

[gpt_sovits]
# GPT-SoVITS Voice Synthesis Settings
# GPT-SoVITS API service address
api_base_url = "http://localhost:9880"
# API Key (optional, if service requires authentication)
api_key = ""
# Request timeout (seconds)
timeout = 60
# Supported voice model path
models_dir = "models/gpt_sovits"

[ui]
# UI related settings
# Whether to hide logs in the UI
hide_log = false

[database]
# Session / metadata storage for Claude-Flow Hive-Mind
type = "postgresql"            # sqlite | memory | postgresql
path = "${DATABASE_URL}"  # Relative to project root
fallback_to_memory = false  # Fall back to RAM if PostgreSQL unavailable

[video]
# Enhanced Video Generation Settings
# Default video format (youtube_shorts, instagram_reels, tiktok, landscape, square)
default_format = "youtube_shorts"
# Default video duration (seconds)
default_duration = 30
# Maximum video duration (seconds)
max_duration = 60
# Default resolution (1080x1920 for vertical, 1920x1080 for landscape)
default_resolution = "1080x1920"
# GPU acceleration
enable_gpu_acceleration = true
# Subtitle settings
enable_auto_subtitles = true
subtitle_font_size = 48
subtitle_color = "white"
subtitle_stroke_color = "black"
subtitle_stroke_width = 2

# MCP API Keys configuration
[mcp.api_keys]
admin_key = { name = "Admin User", role = "admin", active = true }
user_key = { name = "Regular User", role = "user", active = true }

[supabase]
# Supabase Configuration
# Get these values from your Supabase project settings -> API
# Project URL: https://your-project.supabase.co
# API Keys: Available in Settings -> API section

# Supabase Project URL (required)
url = "${SUPABASE_URL}"

# Anonymous/Public API Key (required for client-side operations)
key = "${SUPABASE_ANON_KEY}"
anon_key = "${SUPABASE_ANON_KEY}"

# Service Role Key (optional, for server-side admin operations)
# ⚠️  WARNING: Service role key bypasses RLS - use with extreme caution
# Only set this if you need server-side admin operations
service_role_key = "${SUPABASE_SERVICE_ROLE_KEY}"